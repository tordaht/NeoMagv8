/**
 * üß¨ mnBac v9.5.0 - User Interaction Manager
 * Ultra-Aggressive Anti-Monotony Language Evolution System
 * Production-Ready User Input & Chat Management
 * Date: December 19, 2024
 */

import { languageEvolutionEngine } from '@/engine/LanguageEvolutionEngine.js';
import { getContextualWord } from '@/utils/semanticFields.js';
import { turkceDialogueGenerator } from '@/engine/TurkceDialogueGenerator.js';
import { RUNTIME_CONFIG } from '../config/SystemConfig.js';

export default class UserInteractionManager {
    constructor(simulationManager) {
        this.simManager = simulationManager;
        this.langEngine = languageEvolutionEngine;
        this.lastContext = 'default';
        this.conversationHistory = [];
        
        // Intent patterns
        this.intentPatterns = {
            question: /\b(ne|nasƒ±l|neden|kim|where|what|how|why|when|sence|d√º≈ü√ºn√ºyorsun|\?)/i,
            biological: /\b(enerji|ya≈üam|b√ºy√ºme|beslenme|metabolizma|h√ºcre|evrim|dna|gen)/i,
            social: /\b(merhaba|selam|dostum|arkada≈ü|birlikte|sosyal|grup|ileti≈üim|konu≈üma)/i,
            creative: /\b(sanat|yaratƒ±cƒ±|hayal|r√ºya|dans|m√ºzik|renk|g√ºzel|estetik)/i,
            philosophical: /\b(anlam|felsefe|varolu≈ü|bilin√ß|d√º≈ü√ºnce|mantƒ±k|ger√ßek|hakikat)/i,
            technical: /\b(teknoloji|bilgisayar|algoritma|kod|program|sistem|hesaplama)/i,
            emotional: /\b(mutlu|√ºzg√ºn|korku|sevgi|√∂fke|heyecan|sakin|duygusal|hissediyor)/i,
            absurd: /\b(garip|tuhaf|sa√ßma|komik|acayip|s√ºrreal|abs√ºrt|anlamsƒ±z)/i
        };
    }

    /**
     * Ana mesaj i≈üleme fonksiyonu
     */
    async handleMessage(userMsg) {
        try {
            console.log(`üß† UserInteractionManager: "${userMsg}" analiz ediliyor...`);
            
            // 1Ô∏è‚É£ Niyet tespit et
            const intent = this._detectIntent(userMsg);
            console.log(`üéØ Tespit edilen niyet: ${intent}`);
            
            // 2Ô∏è‚É£ Baƒülam belirle
            this.lastContext = this._mapIntentToContext(intent);
            console.log(`üé≠ Belirlenen baƒülam: ${this.lastContext}`);
            
            // 3Ô∏è‚É£ En uygun bakteriyi se√ß
            const respondingBacteria = this._selectRespondingBacteria(intent);
            
            // 4Ô∏è‚É£ Yanƒ±t √ºret
            const response = await this._generateUserResponse(userMsg, respondingBacteria, intent);
            
            // 5Ô∏è‚É£ Konu≈üma ge√ßmi≈üine ekle
            this._updateConversationHistory(userMsg, response, intent);
            
            // 6Ô∏è‚É£ Bakterinin kelime haznesini g√ºncelle
            this._updateBacteriaVocabulary(respondingBacteria, userMsg);
            
            return {
                response,
                bacteria: respondingBacteria,
                intent,
                context: this.lastContext
            };
            
        } catch (error) {
            console.error('‚ùå UserInteractionManager hatasƒ±:', error);
            return {
                response: 'Hmm, ≈üu anda d√º≈ü√ºnemiyorum... ü§î',
                bacteria: null,
                intent: 'default',
                context: 'neutral'
            };
        }
    }

    /**
     * Kullanƒ±cƒ± niyetini tespit et
     */
    _detectIntent(message) {
        const msg = message.toLocaleLowerCase('tr');
        
        // Intent skorlamasƒ±
        const scores = {};
        for (const [intent, pattern] of Object.entries(this.intentPatterns)) {
            const matches = (msg.match(pattern) || []).length;
            if (matches > 0) {
                scores[intent] = matches;
            }
        }
        
        // En y√ºksek skora sahip intent
        if (Object.keys(scores).length > 0) {
            const topIntent = Object.entries(scores)
                .sort(([,a], [,b]) => b - a)[0][0];
            return topIntent;
        }
        
        // Fallback: mesaj uzunluƒüuna g√∂re
        if (msg.length > 50) return 'philosophical';
        if (msg.includes('!')) return 'emotional';
        
        return 'default';
    }

    /**
     * Intent'i context'e √ßevir
     */
    _mapIntentToContext(intent) {
        const mapping = {
            question: 'inquiry',
            biological: 'survival', 
            social: 'social',
            creative: 'creative',
            philosophical: 'philosophical',
            technical: 'neutral',
            emotional: 'creative',
            absurd: 'creative',
            default: 'social'
        };
        
        return mapping[intent] || 'neutral';
    }

    /**
     * Yanƒ±t verecek bakteriyi se√ß
     */
    _selectRespondingBacteria(intent) {
        const bacteria = this.simManager.bacteriaPopulation;
        if (bacteria.length === 0) return null;
        
        // Intent'e g√∂re en uygun bakteriyi bul
        let candidates = bacteria;
        
        switch (intent) {
            case 'biological':
                candidates = bacteria.filter(b => b.energy_level > 0.6);
                break;
            case 'social':
                candidates = bacteria.filter(b => b.personality?.sociability > 0.5);
                break;
            case 'creative':
                candidates = bacteria.filter(b => b.personality?.creativity > 0.5);
                break;
            case 'philosophical':
                candidates = bacteria.filter(b => b.consciousness_level > 0.6);
                break;
            case 'emotional':
                candidates = bacteria.filter(b => b.mood > 0.7 || b.mood < 0.3);
                break;
        }
        
        // Fallback: t√ºm bakteriler
        if (candidates.length === 0) candidates = bacteria;
        
        // En uygun bakteriyi se√ß (kelime hazinesi + √∂zellikler)
        const selected = candidates.reduce((best, current) => {
            const currentScore = this._calculateBacteriaScore(current, intent);
            const bestScore = best ? this._calculateBacteriaScore(best, intent) : -1;
            return currentScore > bestScore ? current : best;
        });
        
        return selected;
    }

    /**
     * Bakteri uygunluk skoru hesapla
     */
    _calculateBacteriaScore(bacteria, intent) {
        let score = 0;
        
        // Kelime hazinesi
        score += bacteria.vocabulary.size * 2;
        
        // Ki≈üilik uyumu
        if (bacteria.personality) {
            switch (intent) {
                case 'social':
                    score += bacteria.personality.sociability * 50;
                    break;
                case 'creative':
                    score += bacteria.personality.creativity * 50;
                    break;
                case 'emotional':
                    score += bacteria.personality.optimism * 30;
                    break;
            }
        }
        
        // Enerji ve ruh hali
        score += bacteria.energy_level * 20;
        score += bacteria.mood * 15;
        score += bacteria.consciousness_level * 25;
        
        // Etkile≈üim deneyimi
        score += bacteria.interaction_count * 0.5;
        
        return score;
    }

    /**
     * Kullanƒ±cƒ±ya √∂zel yanƒ±t √ºret
     */
    async _generateUserResponse(userMsg, bacteria, intent) {
        if (!bacteria) {
            return 'Hen√ºz kimse cevap vermeye hazƒ±r deƒüil... ü¶†';
        }
        
        // Bakterinin mevcut durumuna g√∂re ba≈ülangƒ±√ß template'i se√ß
        const templates = this._getResponseTemplates(intent, bacteria);
        const baseTemplate = templates[Math.floor(Math.random() * templates.length)];
        
        // 1Ô∏è‚É£ T√ºrk√ße Diyalog Generator ile zengin c√ºmle √ºret
        try {
            const contextMapping = {
                'inquiry': 'philosophical',
                'survival': 'biological',
                'social': 'social',
                'creative': 'creative',
                'philosophical': 'philosophical',
                'neutral': 'creative'
            };
            
            const turkishContext = contextMapping[this.lastContext] || 'creative';
            const additionalInfo = {
                mood: bacteria.mood > 0.7 ? 'happy' : bacteria.mood < 0.3 ? 'sad' : 'neutral',
                energy: bacteria.energy_level < 0.3 ? 'low' : 'normal'
            };
            
            const turkishSentence = turkceDialogueGenerator.generateContextualSentence(
                bacteria, 
                turkishContext, 
                additionalInfo
            );
            
            if (turkishSentence && turkishSentence.split(' ').length > 2) {
                // Template ile T√ºrk√ße c√ºmleyi birle≈ütir
                return this._combineTemplateAndTurkish(baseTemplate, turkishSentence, bacteria);
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è T√ºrk√ße diyalog √ºretilemedi:', error);
        }
        
        // 2Ô∏è‚É£ Fallback: Creative expression
        try {
            const creativeResponse = await this.langEngine.generateCreativeExpression(
                bacteria, 
                this.lastContext
            );
            
            if (creativeResponse) {
                return this._combineTemplateAndCreative(baseTemplate, creativeResponse, bacteria);
            }
        } catch (error) {
            console.warn('‚ö†Ô∏è Creative response √ºretilemedi:', error);
        }
        
        // 3Ô∏è‚É£ Son fallback: sadece template
        return this._personalizeTemplate(baseTemplate, bacteria, userMsg);
    }

    /**
     * Intent ve bakteri durumuna g√∂re response template'leri
     */
    _getResponseTemplates(intent, bacteria) {
        const energyLevel = bacteria.energy_level;
        const mood = bacteria.mood;
        const name = bacteria.name;
        
        const templates = {
            question: [
                `${name}: ƒ∞lgin√ß soru! Bence...`,
                `${name}: D√º≈ü√ºnmek gerek... Belki...`,
                `${name}: Sormak g√ºzel! Ben ≈ü√∂yle g√∂r√ºyorum:`,
                `${name}: Aha! Bu konuda deneyimim var:`
            ],
            biological: [
                `${name}: Ya≈üam hakkƒ±nda konu≈ümak ho≈üuma gidiyor!`,
                `${name}: Biyolojik s√ºre√ßler fascinant...`,
                `${name}: Enerji d√∂ng√ºleri muhte≈üem!`,
                `${name}: Organik kimya benim alanƒ±m:`
            ],
            social: [
                `${name}: Selam! Sohbet etmek g√ºzel üòä`,
                `${name}: Sosyal olmayƒ± seviyorum!`,
                `${name}: Birlikte d√º≈ü√ºnelim:`,
                `${name}: Arkada≈ülƒ±k g√ºzel bir ≈üey!`
            ],
            creative: [
                `${name}: Yaratƒ±cƒ±lƒ±k benim tutkum! ‚ú®`,
                `${name}: Hayal kurmayƒ± seviyorum...`,
                `${name}: Sanatsal d√º≈ü√ºnce:`,
                `${name}: ƒ∞lham verici! üé®`
            ],
            philosophical: [
                `${name}: Derin d√º≈ü√ºnce... ü§î`,
                `${name}: Varolu≈üsal sorular ilgin√ß...`,
                `${name}: Felsefi perspektif:`,
                `${name}: Bilin√ß hakkƒ±nda d√º≈ü√ºn√ºrken:`
            ]
        };
        
        // Enerji d√º≈ü√ºkse yorgun template'ler ekle
        if (energyLevel < 0.3) {
            return [`${name}: Yorgunum ama... üò¥`, `${name}: Az enerjim var, kƒ±saca:`];
        }
        
        // Ruh hali k√∂t√ºyse
        if (mood < 0.3) {
            return [`${name}: Moralim bozuk ama...`, `${name}: √úzg√ºn√ºm, yine de:`];
        }
        
        return templates[intent] || [`${name}: D√º≈ü√ºnmem gerek...`];
    }

    /**
     * Template ve T√ºrk√ße c√ºmleyi birle≈ütir
     */
    _combineTemplateAndTurkish(template, turkishSentence, bacteria) {
        const combinations = [
            `${template} ${turkishSentence}`,
            `${template}\nüß¨ ${turkishSentence}`,
            `${template} Yani: ${turkishSentence}`,
            `${template}\nüí° A√ßƒ±klama: ${turkishSentence}`,
            turkishSentence // Bazen sadece T√ºrk√ße c√ºmle
        ];
        
        return combinations[Math.floor(Math.random() * combinations.length)];
    }

    /**
     * Template ve creative response'u birle≈ütir
     */
    _combineTemplateAndCreative(template, creative, bacteria) {
        const combinations = [
            `${template} ${creative}`,
            `${template}\nüí≠ ${creative}`,
            `${template} ≈û√∂yle ki: ${creative}`,
            `${template}\nüî¨ Detay: ${creative}`
        ];
        
        return combinations[Math.floor(Math.random() * combinations.length)];
    }

    /**
     * Template'i ki≈üiselle≈ütir
     */
    _personalizeTemplate(template, bacteria, userMsg) {
        // Kullanƒ±cƒ± mesajƒ±ndan anahtar kelime √ßek
        const keywords = userMsg.split(' ').filter(word => word.length > 3);
        const randomKeyword = keywords[Math.floor(Math.random() * keywords.length)];
        
        if (randomKeyword) {
            return `${template} "${randomKeyword}" kelimesi ilgin√ß...`;
        }
        
        return template;
    }

    /**
     * Konu≈üma ge√ßmi≈üini g√ºncelle
     */
    _updateConversationHistory(userMsg, response, intent) {
        this.conversationHistory.push({
            timestamp: Date.now(),
            userMessage: userMsg,
            botResponse: response,
            intent: intent,
            context: this.lastContext
        });
        
        // Son 20 konu≈ümayƒ± tut
        if (this.conversationHistory.length > 20) {
            this.conversationHistory.shift();
        }
    }

    /**
     * Bakterinin kelime hazinesini g√ºncelle
     */
    _updateBacteriaVocabulary(bacteria, userMsg) {
        if (!bacteria) return;
        
        const words = userMsg.toLocaleLowerCase('tr')
            .replace(/[^\w\s]/g, '')
            .split(' ')
            .filter(word => word.length > 2);
        
        words.forEach(word => {
            bacteria.vocabulary.add(word);
        });
        
        console.log(`üìö ${bacteria.name} yeni kelimeler √∂ƒürendi: ${words.join(', ')}`);
    }

    /**
     * Durumu raporla
     */
    getStatus() {
        return {
            lastContext: this.lastContext,
            conversationCount: this.conversationHistory.length,
            availableBacteria: this.simManager.bacteriaPopulation.length,
            lastInteraction: this.conversationHistory[this.conversationHistory.length - 1] || null
        };
    }
} 